<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>DataSpeed</title>
    <subtitle>慢慢积累，稳稳前行，用数据说话，为成长助力</subtitle>
    <link rel="self" type="application/atom+xml" href="https://d4speed.github.io/DataSpeed/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://d4speed.github.io/DataSpeed/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-18T00:00:00+00:00</updated>
    <id>https://d4speed.github.io/DataSpeed/atom.xml</id>
    <entry xml:lang="en">
        <title>《DataSpeed Weekly》| 速据新知周刊 第 1 期</title>
        <published>2024-12-18T00:00:00+00:00</published>
        <updated>2024-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              DataSpeed
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://d4speed.github.io/DataSpeed/placeholder-1/"/>
        <id>https://d4speed.github.io/DataSpeed/placeholder-1/</id>
        
        <content type="html" xml:base="https://d4speed.github.io/DataSpeed/placeholder-1/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;weekly001.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jian-jie&quot;&gt;简介&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;A new week begins with reading &quot;dataspeed weekly&quot;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你好，欢迎阅读《速据新知》，每周一与您分享最新的社区动态、组件更新、近期活动以及精彩文章推荐！希望您在这里洞悉行业，提升技术！&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;kai-yuan-zu-jian-geng-xin&quot;&gt;开源组件更新&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;kai-yuan-tui-jian&quot;&gt;开源推荐&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;hao-wen-tui-jian&quot;&gt;好文推荐&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;jin-qi-huo-dong&quot;&gt;近期活动&lt;&#x2F;h2&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>数据血缘 | 图数据库，一个数据血缘绕不开的话题</title>
        <published>2024-12-18T00:00:00+00:00</published>
        <updated>2024-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              DataSpeed
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://d4speed.github.io/DataSpeed/tu-shu-ju-ku/"/>
        <id>https://d4speed.github.io/DataSpeed/tu-shu-ju-ku/</id>
        
        <content type="html" xml:base="https://d4speed.github.io/DataSpeed/tu-shu-ju-ku/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;00-%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93.png&quot; alt=&quot;img&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tu-shu-ju-ku-yi-ge-shu-ju-xie-yuan-rao-bu-kai-de-hua-ti&quot;&gt;图数据库，一个数据血缘绕不开的话题&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在现代数据管理中，&lt;strong&gt;数据血缘（Data Lineage）&lt;&#x2F;strong&gt; 是一项至关重要的任务，它帮助我们追踪数据的来源、流向及变更过程，确保数据的透明性和可信性。然而，随着数据规模和复杂度的不断增长，传统的关系型数据库在处理复杂的数据关系和依赖时往往面临性能和灵活性上的瓶颈。&lt;&#x2F;p&gt;
&lt;p&gt;本篇文章通过剖析数据血缘的挑战，展示了图数据库，尤其是&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt;，如何凭借其高效的图结构模型和强大的查询能力，解决这些难题。文章涵盖了从 Neo4j 的基本操作到实际案例中的应用，以及如何利用 Cypher 查询语言直观管理数据血缘，最后分享了在实际开发中的最佳实践。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-shu-ju-xie-yuan-de-tiao-zhan&quot;&gt;1 数据血缘的挑战&lt;&#x2F;h2&gt;
&lt;p&gt;在现代数据管理中，数据血缘（Data Lineage）指的是追踪数据从源头到目的地的全过程，包括数据的产生、变换、传输以及存储。随着数据的增长和复杂化，追踪数据的流动变得愈加困难。传统的关系型数据库在这一领域面临许多挑战，主要表现在以下几个方面：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;复杂的依赖关系难以表示&lt;&#x2F;strong&gt;：关系型数据库以表格形式存储数据，表之间的依赖关系处理起来较为笨拙。当涉及到多层级、多源头的数据流动时，表结构往往无法清晰地表达复杂的依赖关系和数据变换。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;查询效率低&lt;&#x2F;strong&gt;：数据血缘的查询往往涉及到多个数据表和字段的联接，复杂的 SQL 查询会导致性能瓶颈，尤其在大规模数据集下，查询效率显著下降。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动态数据变化难以适应&lt;&#x2F;strong&gt;：随着数据源的增多和变动，传统数据库难以灵活应对数据结构和关系的变化，需要频繁调整表结构或重新设计查询。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;因此，如何高效、准确地管理和查询数据血缘成为数据管理中亟待解决的问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-tu-shu-ju-ku-de-you-shi&quot;&gt;2 图数据库的优势&lt;&#x2F;h2&gt;
&lt;p&gt;图数据库（如 Neo4j）凭借其独特的图结构优势，在解决数据血缘问题上具有显著的优势。图数据库采用图（节点、边、属性）来表示和存储数据，使得其在处理复杂关系和依赖时，比关系型数据库更加高效和灵活。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自然表达复杂关系&lt;&#x2F;strong&gt;：图数据库的节点和边能够直观地表示数据实体和它们之间的关系。在数据血缘追踪中，数据源、数据变换、数据传输等关系可以通过图结构清晰地建模，避免了关系型数据库中复杂的表连接。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;高效的查询能力&lt;&#x2F;strong&gt;：图数据库支持图遍历查询，能够快速找到数据之间的依赖关系，尤其在处理深层次、多级的数据血缘时，性能远超传统的 SQL 查询。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;动态扩展性&lt;&#x2F;strong&gt;：图数据库能够适应数据和关系的动态变化，无需大幅修改现有结构，这对于频繁变化的数据血缘关系来说，是一个巨大的优势。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;因此，图数据库提供了一种更加直观、灵活、高效的方法，帮助解决传统数据库在数据血缘管理中的局限性。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-chang-jian-tu-shu-ju-ku&quot;&gt;3 常见图数据库&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;图数据库&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;主要特点&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;适用场景&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;不足之处&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 基于 ACID 事务的强一致性保障。&lt;br &#x2F;&gt; - 提供强大的查询语言 Cypher，适合复杂图查询。 &lt;br &#x2F;&gt;- 社区支持广泛，生态成熟。&lt;&#x2F;td&gt;&lt;td&gt;- 数据血缘、推荐系统、社交网络分析。&lt;&#x2F;td&gt;&lt;td&gt;- 对于超大规模图处理的水平扩展有限。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;TigerGraph&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 专注于超大规模图计算，支持分布式存储和查询。&lt;br &#x2F;&gt;- 提供 GSQL 语言，适合图算法开发。&lt;&#x2F;td&gt;&lt;td&gt;- 金融风控、实时推荐、网络分析。&lt;&#x2F;td&gt;&lt;td&gt;- 社区版功能受限，学习曲线较陡。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;JanusGraph&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 开源分布式图数据库，可集成多种存储后端（如 Cassandra、HBase）。&lt;br &#x2F;&gt;- 支持 TinkerPop Gremlin 图查询框架。&lt;&#x2F;td&gt;&lt;td&gt;- 分布式图存储和分析，社交网络建模。&lt;&#x2F;td&gt;&lt;td&gt;- 部署和维护复杂，性能依赖存储后端。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;ArangoDB&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 多模型数据库，支持文档、键值和图数据。&lt;br &#x2F;&gt;- 提供 AQL 查询语言，简单易用。&lt;&#x2F;td&gt;&lt;td&gt;- 中小规模图查询，数据整合场景。&lt;&#x2F;td&gt;&lt;td&gt;- 在处理大规模图数据时性能有限。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Amazon Neptune&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 云原生托管服务，支持 Gremlin 和 SPARQL 查询。&lt;br &#x2F;&gt;- 高可用性和可扩展性，适合与 AWS 生态集成。&lt;&#x2F;td&gt;&lt;td&gt;- 云上图分析、知识图谱。&lt;&#x2F;td&gt;&lt;td&gt;- 依赖 AWS 生态，无法本地部署。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;OrientDB&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 多模型支持（文档+图数据库）。&lt;br &#x2F;&gt;- 支持分布式部署，查询语言丰富（SQL、Gremlin）。&lt;&#x2F;td&gt;&lt;td&gt;- 中小型项目的图查询和数据整合。&lt;&#x2F;td&gt;&lt;td&gt;- 性能和生态相比于 Neo4j 稍弱。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;GraphDB&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;- 专注语义图数据库，支持 RDF 和 SPARQL 标准。&lt;br &#x2F;&gt;- 擅长处理知识图谱和本体推理。&lt;&#x2F;td&gt;&lt;td&gt;- 知识图谱、语义推理。&lt;&#x2F;td&gt;&lt;td&gt;- 对非语义数据支持有限，非免费。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;xiang-xi-dui-bi&quot;&gt;详细对比：&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt; 在单机模式下性能极强，适合处理复杂的图查询。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;TigerGraph&lt;&#x2F;strong&gt; 和 &lt;strong&gt;JanusGraph&lt;&#x2F;strong&gt; 更适合大规模分布式图计算场景。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;易用性&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt; 和 &lt;strong&gt;ArangoDB&lt;&#x2F;strong&gt; 提供了用户友好的界面和查询语言，适合入门者。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;JanusGraph&lt;&#x2F;strong&gt; 和 &lt;strong&gt;OrientDB&lt;&#x2F;strong&gt; 的学习成本较高，部署复杂。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;可扩展性&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TigerGraph&lt;&#x2F;strong&gt; 和 &lt;strong&gt;Amazon Neptune&lt;&#x2F;strong&gt; 提供良好的水平扩展支持，适合处理大规模图数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt; 的扩展能力较弱，但通过企业版支持有限的分布式部署。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;生态和社区支持&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neo4j&lt;&#x2F;strong&gt; 生态成熟，有丰富的第三方工具和插件支持。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;JanusGraph&lt;&#x2F;strong&gt; 依赖 TinkerPop 生态，与其他 Apache 项目兼容性好，但社区活跃度不及 Neo4j。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;jie-lun&quot;&gt;结论：&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;如果需要简单易用的图数据库，选择 &lt;strong&gt;Neo4j&lt;&#x2F;strong&gt; 或 &lt;strong&gt;ArangoDB&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;如果项目规模大且需要分布式支持，可以考虑 &lt;strong&gt;TigerGraph&lt;&#x2F;strong&gt; 或 &lt;strong&gt;JanusGraph&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;如果工作主要涉及知识图谱或语义推理，选择 &lt;strong&gt;GraphDB&lt;&#x2F;strong&gt; 或 &lt;strong&gt;Amazon Neptune&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;综合上述考虑最后选择 Neo4j 作为血缘中的图数据库使用。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-neo4j-jian-jie&quot;&gt;4 Neo4j 简介&lt;&#x2F;h2&gt;
&lt;p&gt;Neo4j 是一个&lt;em&gt;原生图数据库&lt;&#x2F;em&gt;，这意味着它从存储级别开始就实现了真正的图模型。它不是在其他技术之上使用“图抽象”，而是在 Neo4j 中以与您在白板上记录想法相同的方式存储数据。&lt;&#x2F;p&gt;
&lt;p&gt;自 2007 年以来，Neo4j 已发展成为一个丰富的工具、应用程序和库生态系统。此生态系统允许您以多种方式将图技术与您的工作环境集成，此处对此进行了描述。&lt;&#x2F;p&gt;
&lt;p&gt;除了核心图之外，Neo4j 还提供 ACID 事务、集群支持和运行时故障转移。&lt;&#x2F;p&gt;
&lt;p&gt;这里建议直接去&lt;a href=&quot;https:&#x2F;&#x2F;neo4j.ac.cn&#x2F;docs&#x2F;&quot; title=&quot;[Neo4j 文档 - Neo4j 文档 - Neo4j 图数据库&quot;&gt;Neo4j官网&lt;&#x2F;a&gt;看看，中文文档非常的健全。&lt;&#x2F;p&gt;
&lt;p&gt;作为学习使用，我建议使用 docker 快速安装社区版本的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-neo4j-chu-ti-yan&quot;&gt;5 Neo4j 初体验&lt;&#x2F;h2&gt;
&lt;p&gt;安装后，Neo4j 自带了访问页面。默认在 &lt;code&gt;http:&#x2F;&#x2F;localhost:7474&lt;&#x2F;code&gt; 提供浏览器访问界面。首次登录时，默认用户名和密码都是 &lt;code&gt;neo4j&lt;&#x2F;code&gt;（首次登录需要你更改密码）。&lt;&#x2F;p&gt;
&lt;p&gt;Neo4j 提供了强大的 Cypher 语法，就像 Mysql 的 sql 语句一样操作数据库。下面我们来简单体验一下。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建节点：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;CQL&quot; class=&quot;language-CQL &quot;&gt;&lt;code class=&quot;language-CQL&quot; data-lang=&quot;CQL&quot;&gt;CREATE (a:Person {name: &amp;#x27;Alice&amp;#x27;, age: 30})
CREATE (b:Person {name: &amp;#x27;Bob&amp;#x27;, age: 25})
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;创建关系：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;CQL&quot; class=&quot;language-CQL &quot;&gt;&lt;code class=&quot;language-CQL&quot; data-lang=&quot;CQL&quot;&gt;MATCH (a:Person {name: &amp;#x27;Alice&amp;#x27;}), (b:Person {name: &amp;#x27;Bob&amp;#x27;})
CREATE (a)-[:FRIEND]-&amp;gt;(b)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;查看节点和关系：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;CQL&quot; class=&quot;language-CQL &quot;&gt;&lt;code class=&quot;language-CQL&quot; data-lang=&quot;CQL&quot;&gt;MATCH (n) RETURN n
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;%E5%88%9D%E4%BD%93%E9%AA%8C.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在页面能够使用 cql 语句，能够轻松的操作 Neo4j，而且有丰富的图形化页面。并且支持多种方式展示节点，Graph、Table、Text、Code 。Graph 的页面最为直观和有趣，还能还能进行点击、拖拉拽能功能，非常好玩。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-neo4j-zai-shu-ju-xie-yuan-zhong-de-ju-ti-shi-yong&quot;&gt;6 Neo4j 在数据血缘中的具体使用&lt;&#x2F;h2&gt;
&lt;p&gt;接下来将结合具体案例来聊聊如何在 Neo4j 中实现具体的数据血缘，这里就默认你已经掌握 Neo4j 的基本概念与使用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-1-bei-jing-fen-xi&quot;&gt;6.1 背景分析&lt;&#x2F;h3&gt;
&lt;p&gt;我们以 datax 的血缘梳理为例，在 datax 中包含几个关键实体：datax task 、source table、target table 。这三个实体的关系是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;source table 和 target table 是【被用于】 datax task&lt;&#x2F;li&gt;
&lt;li&gt;target table 的【上游】 是 source table 。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然每个实体还有各自的一些属性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;datax task：name 、 type 、query&lt;&#x2F;li&gt;
&lt;li&gt;source table 、target table : name 、database 、schema&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;注：为了方便阅读，属性被简单化了，实际使用中属性更丰富一些。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-2-ji-chu-shu-ju&quot;&gt;6.2 基础数据&lt;&#x2F;h3&gt;
&lt;p&gt;基于上面的分析，我准备了一些基础数据，六张表、三个任务来展示关系。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 创建表节点
CREATE (sales:Table {name: &amp;#x27;sales_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})
CREATE (customer:Table {name: &amp;#x27;customer_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})
CREATE (product:Table {name: &amp;#x27;product_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})
CREATE (order:Table {name: &amp;#x27;order_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})
CREATE (invoice:Table {name: &amp;#x27;invoice_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})
CREATE (summary:Table {name: &amp;#x27;summary_data&amp;#x27;, database: &amp;#x27;db1&amp;#x27;, schema: &amp;#x27;public&amp;#x27;})

&amp;#x2F;&amp;#x2F; 创建任务节点
CREATE (task1:Task {name: &amp;#x27;task_1&amp;#x27;, type: &amp;#x27;ETL&amp;#x27;, query: &amp;#x27;SELECT * FROM sales_data JOIN customer_data&amp;#x27;})
CREATE (task2:Task {name: &amp;#x27;task_2&amp;#x27;, type: &amp;#x27;ETL&amp;#x27;, query: &amp;#x27;SELECT * FROM order_data JOIN product_data&amp;#x27;})
CREATE (task3:Task {name: &amp;#x27;task_3&amp;#x27;, type: &amp;#x27;Reporting&amp;#x27;, query: &amp;#x27;SELECT * FROM invoice_data JOIN order_data JOIN customer_data&amp;#x27;})

&amp;#x2F;&amp;#x2F; Task 1: sales_data, customer_data -&amp;gt; order_data
CREATE (sales)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task1)
CREATE (customer)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task1)
CREATE (task1)-[:USED_IN {role: &amp;#x27;target&amp;#x27;}]-&amp;gt;(order)

&amp;#x2F;&amp;#x2F; Task 2: order_data, product_data -&amp;gt; invoice_data
CREATE (order)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task2)
CREATE (product)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task2)
CREATE (task2)-[:USED_IN {role: &amp;#x27;target&amp;#x27;}]-&amp;gt;(invoice)

&amp;#x2F;&amp;#x2F; Task 3: invoice_data, order_data, customer_data -&amp;gt; summary_data
CREATE (invoice)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task3)
CREATE (order)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task3)
CREATE (customer)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task3)
CREATE (task3)-[:USED_IN {role: &amp;#x27;target&amp;#x27;}]-&amp;gt;(summary)

&amp;#x2F;&amp;#x2F; Task 1: order_data -&amp;gt; sales_data, customer_data
CREATE (order)-[:UPSTREAM]-&amp;gt;(sales)
CREATE (order)-[:UPSTREAM]-&amp;gt;(customer)

&amp;#x2F;&amp;#x2F; Task 2: invoice_data -&amp;gt; order_data, product_data
CREATE (invoice)-[:UPSTREAM]-&amp;gt;(order)
CREATE (invoice)-[:UPSTREAM]-&amp;gt;(product)

&amp;#x2F;&amp;#x2F; Task 3: summary_data &amp;lt;- invoice_data, order_data, customer_data
CREATE (summary)&amp;lt;-[:UPSTREAM]-(invoice)
CREATE (summary)&amp;lt;-[:UPSTREAM]-(order)
CREATE (summary)&amp;lt;-[:UPSTREAM]-(customer)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所有数据准备好之后，我们来查询一下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;match (n) return n
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE.png&quot; alt=&quot;基础数据&quot; &#x2F;&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;展示了前面创建的所有节点与关系，还挺壮观的，节点能够自由点击与拖拽，非常直观。&lt;&#x2F;p&gt;
&lt;p&gt;接下来结合一些场景展示如何具体的使用&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-3-cha-xun&quot;&gt;6.3 查询&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;查询任务 1 中使用的表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;match (table:Table) -[r:USED_IN]-&amp;gt;(task:Task {name:&amp;#x27;task_1&amp;#x27;}) return table,task
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;%E6%9F%A5%E8%AF%A2%E4%BB%BB%E5%8A%A1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一条 cql 就能搞定，比使用关系型数据库方便多了。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询 表的上游关系&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;match (target:Table {name:&amp;#x27;order_data&amp;#x27;}) &amp;lt;-[:UPSTREAM]-(source:Table) return target,source
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dataspeed-1301261215.cos.ap-nanjing.myqcloud.com&#x2F;%E6%9F%A5%E8%AF%A2%E8%A1%A8%E7%9A%84%E4%B8%8A%E6%B8%B8%E5%85%B3%E7%B3%BB.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-4-xiu-gai&quot;&gt;6.4 修改&lt;&#x2F;h3&gt;
&lt;p&gt;除了查询，日常中最常用的可能就是修改了，在血缘中一般会周期性的分析血缘关系，然后维护到 Neo4j，就需要不断的修改或删除。接下来结合一些常用的场景距离。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;6-4-1-xiu-gai-xin-biao-yu-ren-wu-zhi-jian-de-guan-xi&quot;&gt;6.4.1 修改新表与任务之间的关系&lt;&#x2F;h4&gt;
&lt;p&gt;假设某个表在不同任务中的角色发生了变化，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;任务 &lt;code&gt;task_1&lt;&#x2F;code&gt; 使用 &lt;code&gt;sales_data&lt;&#x2F;code&gt; 作为源表，但现在它将 &lt;code&gt;sales_data&lt;&#x2F;code&gt; 用作目标表。&lt;&#x2F;li&gt;
&lt;li&gt;任务 &lt;code&gt;task_2&lt;&#x2F;code&gt; 开始使用 &lt;code&gt;customer_data&lt;&#x2F;code&gt; 作为源表，而 &lt;code&gt;task_3&lt;&#x2F;code&gt; 之前并未使用 &lt;code&gt;customer_data&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;修改任务中表的角色&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 将 `sales_data` 在 `task_1` 中的角色从源表变更为目标表
MATCH (table:Table {name: &amp;#x27;sales_data&amp;#x27;})-[r:USED_IN]-&amp;gt;(task:Task {name: &amp;#x27;task_1&amp;#x27;})
SET r.role = &amp;#x27;target&amp;#x27;

&amp;#x2F;&amp;#x2F; 将 `customer_data` 在 `task_2` 中的角色改为源表
MATCH (table:Table {name: &amp;#x27;customer_data&amp;#x27;})-[r:USED_IN]-&amp;gt;(task:Task {name: &amp;#x27;task_2&amp;#x27;})
SET r.role = &amp;#x27;source&amp;#x27;

&amp;#x2F;&amp;#x2F; 为 `task_3` 添加 `customer_data` 作为源表
MATCH (task:Task {name: &amp;#x27;task_3&amp;#x27;}), (table:Table {name: &amp;#x27;customer_data&amp;#x27;})
MERGE (table)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;删除任务与表之间的关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 删除 `sales_data` 在 `task_1` 中的使用关系
MATCH (table:Table {name: &amp;#x27;sales_data&amp;#x27;})-[r:USED_IN]-&amp;gt;(task:Task {name: &amp;#x27;task_1&amp;#x27;})
DELETE r
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;6-4-2-geng-xin-biao-yu-biao-zhi-jian-de-guan-xi&quot;&gt;6.4.2 更新表与表之间的关系&lt;&#x2F;h4&gt;
&lt;p&gt;假设表之间的依赖关系发生变化，比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;invoice_data&lt;&#x2F;code&gt; 不再依赖于 &lt;code&gt;product_data&lt;&#x2F;code&gt;，而是改为依赖于 &lt;code&gt;customer_data&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;order_data&lt;&#x2F;code&gt; 在 &lt;code&gt;task_2&lt;&#x2F;code&gt; 中的上游表发生了变化，&lt;code&gt;sales_data&lt;&#x2F;code&gt; 现在是它的上游表。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;修改表之间的依赖关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 删除 `invoice_data` 和 `product_data` 之间的上游关系
MATCH (invoice:Table {name: &amp;#x27;invoice_data&amp;#x27;})&amp;lt;-[r:UPSTREAM]-(product:Table {name: &amp;#x27;product_data&amp;#x27;})
DELETE r

&amp;#x2F;&amp;#x2F; 创建新的 `invoice_data` 和 `customer_data` 之间的上游关系
MATCH (invoice:Table {name: &amp;#x27;invoice_data&amp;#x27;}), (customer:Table {name: &amp;#x27;customer_data&amp;#x27;})
MERGE (invoice)&amp;lt;-[:UPSTREAM]-(customer)

&amp;#x2F;&amp;#x2F; 将 `sales_data` 设置为 `order_data` 的上游表
MATCH (order:Table {name: &amp;#x27;order_data&amp;#x27;}), (sales:Table {name: &amp;#x27;sales_data&amp;#x27;})
MERGE (order)&amp;lt;-[:UPSTREAM]-(sales)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;删除表之间的依赖关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 删除 `invoice_data` 的上游关系（即删除与 `order_data` 之间的依赖）
MATCH (invoice:Table {name: &amp;#x27;invoice_data&amp;#x27;})&amp;lt;-[r:UPSTREAM]-(order:Table {name: &amp;#x27;order_data&amp;#x27;})
DELETE r
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;6-4-3-biao-yu-ren-wu-zhi-jian-de-guan-xi-bian-hua&quot;&gt;6.4.3 表与任务之间的关系变化&lt;&#x2F;h4&gt;
&lt;p&gt;假设一个新的任务 &lt;code&gt;task_4&lt;&#x2F;code&gt; 开始使用某个表，并且某个表的角色发生了变化。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新增表与任务的关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 为 `task_4` 添加新的源表 `product_data`
MATCH (task:Task {name: &amp;#x27;task_4&amp;#x27;}), (table:Table {name: &amp;#x27;product_data&amp;#x27;})
MERGE (table)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task)

&amp;#x2F;&amp;#x2F; 为 `task_4` 添加新的目标表 `summary_data`
MATCH (task:Task {name: &amp;#x27;task_4&amp;#x27;}), (table:Table {name: &amp;#x27;summary_data&amp;#x27;})
MERGE (task)-[:USED_IN {role: &amp;#x27;target&amp;#x27;}]-&amp;gt;(table)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;删除表与任务之间的关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 删除 `task_1` 中 `sales_data` 的使用关系
MATCH (task:Task {name: &amp;#x27;task_1&amp;#x27;})-[r:USED_IN]-&amp;gt;(table:Table {name: &amp;#x27;sales_data&amp;#x27;})
DELETE r
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;6-4-4-duo-biao-he-duo-ren-wu-zhi-jie-de-guan-xi-bian-hua&quot;&gt;6.4.4 多表和多任务直接的关系变化&lt;&#x2F;h4&gt;
&lt;p&gt;如果多个表的依赖关系同时发生了变化（例如一个任务同时影响多个表）&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;更新多个任务中的表角色&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 将 `customer_data` 在 `task_1` 中的角色改为目标表
MATCH (table:Table {name: &amp;#x27;customer_data&amp;#x27;})-[r:USED_IN]-&amp;gt;(task:Task {name: &amp;#x27;task_1&amp;#x27;})
SET r.role = &amp;#x27;target&amp;#x27;

&amp;#x2F;&amp;#x2F; 为 `task_2` 添加 `product_data` 作为源表
MATCH (task:Task {name: &amp;#x27;task_2&amp;#x27;}), (table:Table {name: &amp;#x27;product_data&amp;#x27;})
MERGE (table)-[:USED_IN {role: &amp;#x27;source&amp;#x27;}]-&amp;gt;(task)

&amp;#x2F;&amp;#x2F; 删除 `task_3` 中 `order_data` 作为源表的关系
MATCH (task:Task {name: &amp;#x27;task_3&amp;#x27;})-[r:USED_IN]-&amp;gt;(table:Table {name: &amp;#x27;order_data&amp;#x27;})
DELETE r
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;修改表之间的依赖关系&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;cql&quot; class=&quot;language-cql &quot;&gt;&lt;code class=&quot;language-cql&quot; data-lang=&quot;cql&quot;&gt;&amp;#x2F;&amp;#x2F; 修改 `summary_data` 依赖的上游表
MATCH (summary:Table {name: &amp;#x27;summary_data&amp;#x27;})&amp;lt;-[r:UPSTREAM]-(order:Table {name: &amp;#x27;order_data&amp;#x27;})
DELETE r
MATCH (summary:Table {name: &amp;#x27;summary_data&amp;#x27;}), (invoice:Table {name: &amp;#x27;invoice_data&amp;#x27;})
MERGE (summary)&amp;lt;-[:UPSTREAM]-(invoice)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;7-neo4j-connect&quot;&gt;7 Neo4j connect&lt;&#x2F;h2&gt;
&lt;p&gt;除了 cql 的方式，在实际开发场景中我们更多的是使用代码来连接操作，neo4j 也提供了丰富的 connect， 支持 python、go、java、js、.NET 。&lt;&#x2F;p&gt;
&lt;p&gt;以 python 为例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from neo4j import GraphDatabase

# URI examples: &amp;quot;neo4j:&amp;#x2F;&amp;#x2F;127.0.0.1&amp;quot;, &amp;quot;neo4j+s:&amp;#x2F;&amp;#x2F;xxx.databases.neo4j.io&amp;quot;
URI = &amp;quot;&amp;lt;URI for Neo4j database&amp;gt;&amp;quot;
AUTH = (&amp;quot;&amp;lt;Username&amp;gt;&amp;quot;, &amp;quot;&amp;lt;Password&amp;gt;&amp;quot;)

with GraphDatabase.driver(URI, auth=AUTH) as driver:
    driver.verify_connectivity()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建 driver 实例后，就能通过 driver.exectur_qurery() 实现对数据库的操作。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;8-zong-jie&quot;&gt;8 总结&lt;&#x2F;h2&gt;
&lt;p&gt;Neo4j 图数据库在处理复杂关系和依赖时展现了独特的优势。通过其直观的图模型和强大的 Cypher 查询语言，Neo4j 让数据血缘的构建和管理变得更加高效和灵活。无论是复杂关系的直观表示，还是多层次血缘关系的快速查询，Neo4j 都能很好地满足需求。同时，其原生的图形化操作界面，为用户提供了友好的使用体验，甚至可以直接省去部分前端开发的工作。&lt;&#x2F;p&gt;
&lt;p&gt;在实际应用中，Neo4j 不仅可以简化数据血缘的构建流程，还能通过高效的查询和动态扩展能力，满足不断变化的业务需求。它是企业在面对海量数据血缘场景时不可或缺的利器，为数据治理和决策支持提供了可靠的基础。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
